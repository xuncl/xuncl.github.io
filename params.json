{
  "name": "Python守护线程研究",
  "tagline": "",
  "body": "# Python 守护线程研究\r\n\r\n### python的线程是python自己实现的还是系统实现的？\r\npython线程其实是系统线程。\r\n一些操作系统（比如linux）能给出所有已经跑起来的python线程列表，这说明python线程是基于操作系统的，在其他操作系统里，你可能在查看进程列表时看不到正在跑的线程。\r\n如果所有的非守护进程结束了，整个进程就会停止。此时，所有的守护线程就会被终止。所以守护线程是整个进程的一部分，但是无法阻止进程停止（普通线程可以）。守护线程是纯python实现。一个进程在`_exit`方法被调用后就会终止，届时所有的进程都会被杀死，当主线程终止时（或`sys.exit`被调用），python解释器会查看是不是还有非守护线程活着，如果没有，它就会调用`_exit`，否则就等费守护先成退出。\r\n\r\n下面探讨守护线程的问题：守护线程的标志位是用纯python实现的，通过`threading`模组，当模组导入后，一个Thread对象就建立起来代替了主线程，并且它的`_exitfunc`方法被钩子`atexit`注册了。\r\n这个函数的源码：\r\n\r\n    class _MainThread(Thread):\r\n\r\n        def _exitfunc(self):\r\n            self._Thread__stop()\r\n            t = _pickSomeNonDaemonThread()\r\n            if t:\r\n                if __debug__:\r\n                    self._note(\"%s: waiting for other threads\", self)\r\n            while t:\r\n                t.join()\r\n                t = _pickSomeNonDaemonThread()\r\n            if __debug__:\r\n                self._note(\"%s: exiting\", self)\r\n            self._Thread__delete()\r\n\r\n这个函数被python解释器调用时机为：`sys.exit`调用时或者主线程终止时。这个方法结束后，解释器会调用系统的`_exit`函数.当`_exit`调用后，操作系统会终止这个进程里的所有线程，然后终止进程。Python在存在非守护线程存活时不会调用`_exit`函数。\r\n\r\n### 所有的线程都是进程的一部分。\r\n\r\n我曾以为守护线程不属于进程的一部分（见python官方解释），这其实是错的， 对操作系统来说，一个进程是许多线程的集合，每个线程在操作系统看来都是一样的（对操作系统来说，主线程没什么特别的，他只是在运行结束后最后调用`_exit`函数而已）。而且操作系统也不认识守护线程，这些都是python自己的概念。\r\npython解释器使用原生线程来实现python的线程，只是记录了每个线程怎么创建的。解释器通过`atexit`钩子保证了`_exit`只会在没有非守护线程时结束，文档中的“这个python”程序，指的就是整个进程。\r\n\r\n下面的代码能帮助理解普通线程和守护线程的区别：\r\n\r\n    import sys\r\n    import time\r\n    import threading\r\n    \r\n    class WorkerThread(threading.Thread):\r\n    \r\n        def run(self):\r\n            while True:\r\n                print 'Working hard'\r\n                time.sleep(0.5)\r\n    \r\n    def main(args):\r\n        use_daemon = False\r\n        for arg in args:\r\n            if arg == '--use_daemon':\r\n                use_daemon = True\r\n        worker = WorkerThread()\r\n        worker.setDaemon(use_daemon)\r\n        worker.start()\r\n        time.sleep(1)\r\n        sys.exit(0)\r\n    \r\n    if __name__ == '__main__':\r\n        main(sys.argv[1:])\r\n\r\n如果执行这段代码时加上参数`--use_daemon`，你会看到程序只打印了几行`working hard`，否则不加参数，程序不会停下来。不加`--use_daemon`标记时，即使主程序结束了整个程序也不会停下。",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}